// Generated by Dagger (https://dagger.dev).
package com.hidevelopers.sharepal.presentation.ui.share;

import com.hidevelopers.sharepal.repository.StorageRepo;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ShareViewModel_Factory implements Factory<ShareViewModel> {
  private final Provider<StorageRepo> repositoryProvider;

  private final Provider<CoroutineDispatcher> dispatcherProvider;

  public ShareViewModel_Factory(Provider<StorageRepo> repositoryProvider,
      Provider<CoroutineDispatcher> dispatcherProvider) {
    this.repositoryProvider = repositoryProvider;
    this.dispatcherProvider = dispatcherProvider;
  }

  @Override
  public ShareViewModel get() {
    return newInstance(repositoryProvider.get(), dispatcherProvider.get());
  }

  public static ShareViewModel_Factory create(Provider<StorageRepo> repositoryProvider,
      Provider<CoroutineDispatcher> dispatcherProvider) {
    return new ShareViewModel_Factory(repositoryProvider, dispatcherProvider);
  }

  public static ShareViewModel newInstance(StorageRepo repository, CoroutineDispatcher dispatcher) {
    return new ShareViewModel(repository, dispatcher);
  }
}
